package 数组;
/*
 * 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。

输入：nums = [1,2,3,4]
输出：[1,3,2,4]
注：[3,1,2,4] 也是正确的答案之一。
 
提示：
1 <= nums.length <= 50000
1 <= nums[i] <= 10000


给定一个数组，写一个函数使得数组中的奇数放前面，偶数放后面。
时间复杂度O(1) 要求遍历一遍数组就做到  可以用双指针，一个从前，一个从后同时遍历。
   (1)如果前面为偶数，后面为奇数，就交换，前面指针加一，后面指针减一
	 (2)前面为奇数，后面为偶数，不交换，前面指针加一，后面指针减一
	 (3)前后都为奇数，后面指针不变，前面指针加一
	 (4)前后都为偶数，前面指针不变，后面指针减一
	 (5)满足循环条件：前面指针小于后面指针

使用位运算耗时2秒  %运算耗时4秒   可以体现出位运算比加减乘除等一般的算术运算符快很多
判断一个数实际数还是偶数：有两种方式
        (1) x%2==0 x为偶数   x%2!=0 x为奇数
		(2) x&1==1 x为奇数  x&1==0 x为偶数        数字1的二进制最右边那位为1，其余全为0
 */
public class 调整数组顺序使奇数位于偶数前面 {
    public int[] exchange(int[] nums) {
        int L = 0;
        int R = nums.length-1;
        while(L!=R){
            while(L<R && (nums[L]&1)==1)  //这里容易忽略L<R 条件    说明内层while条件必须满足外层while条件
                L++;
            while(L<R && (nums[R]&1)!=1)  //这里容易忽略L<R 条件
                R--;
            int temp = nums[R];
            nums[R] = nums[L];
            nums[L] = temp;
        }
        return nums;
    }
}
