package 位运算;
/*
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。
你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
输入: [2,2,3,2]
输出: 3

思路：将数组中所有的数都变为二进制数，因为只有一个数只出现一次，其他数都出现了三次，
      那么在每个二进制数的相同位上，1的个数之和要么为3的倍数，要么不为3的倍数，并且不为3的倍数的那个位上，只出现一次的数在那个位上一定是1
      所以准备一个数a=0，只需遍历32位数，将1的个数不为3的倍数的位置上将a的那个位上改为1，最后的a就是指出现一次的那个数。
 */
public class 数组中只有一个出现一次二 {
    public int singleNumber(int[] nums) {
        int ans=0;
        for (int i=0;i<32;i++){
            int count=0;
            for(int j=0;j<nums.length;j++){
                if((nums[j]>>i&1)==1)
                    count++;
            }
            if(count%3!=0)
                ans = ans|1<<i;
        }
        return ans;
    }
}
